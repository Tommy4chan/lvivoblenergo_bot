from aiogram import Dispatcher, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text

from bot.keyboards import KB_CONTINUE_REGISTRATION, KB_CHOOSE_GROUP, KB_POWEROFF_SCHEDULE, get_schedule_menu

from bot.utils import decode_callback_data, get_poweroff_schedule_text, get_weekday, rate_limit, telegram_chat_logging

from bot.database.methods.other import register_user
from bot.database.methods.update import update_user_group, update_user_notification_state


@telegram_chat_logging
async def __start(msg: Message):
    """
    This handler will be called when user sends `/start` or `/restart`
    command to launch or restart bot
    """
    bot: Bot = msg.bot
    user_id = msg.from_user.id
    await register_user(user_id, f'@{msg.from_user.username}, {msg.from_user.full_name}')
    await bot.send_message(user_id, "–ü—Ä–∏–≤—ñ—Ç!\n–Ø –Ω–µ–æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç, —â–æ –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —Å–ø–∏—Ä–∞—é—á–∏—Å—å –Ω–∞ –ø—É–±–ª—ñ—á–Ω—ñ –¥–∞–Ω—ñ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –õ—å–≤—ñ–≤–æ–±–ª–µ–Ω–µ—Ä–≥–æ", reply_markup=KB_CONTINUE_REGISTRATION)


@rate_limit(limit=5, key='new_poweroff_schedule')
@telegram_chat_logging
async def __new_poweroff_schedule(msg: Message):
    """
    This handler will be called when user sends message
    with text "–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—åüïî" to send poweroff
    schedule
    """
    bot: Bot = msg.bot
    user_id = msg.from_user.id
    weekday = get_weekday()

    await bot.send_message(user_id, await get_poweroff_schedule_text(user_id, weekday), reply_markup=await get_schedule_menu(user_id, weekday), parse_mode='Markdown')


@telegram_chat_logging
async def __change_group(query: CallbackQuery):
    """
    This query handler will be called when user change group
    """
    bot: Bot = query.bot
    user_id = query.from_user.id

    await bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=KB_CHOOSE_GROUP)
    await query.answer()


@telegram_chat_logging
async def __group_choosed(query: CallbackQuery):
    """
    This query handler will be called when group is choosed choosed
    """
    bot: Bot = query.bot
    user_id = query.from_user.id
    group_number = await decode_callback_data(query)

    await update_user_group(user_id, group_number)

    await bot.send_message(user_id, f"–í–∏ –æ–±—Ä–∞–ª–∏ {group_number} –≥—Ä—É–ø—É", reply_markup=KB_POWEROFF_SCHEDULE)
    await __new_poweroff_schedule(query)
    await query.answer()


@telegram_chat_logging
async def __select_another_day(query: CallbackQuery):
    """
    This query handler will be called when user change day to another
    """
    user_id = query.from_user.id
    selected_weekday = await decode_callback_data(query)

    await query.message.edit_text(await get_poweroff_schedule_text(user_id, selected_weekday), reply_markup=await get_schedule_menu(user_id, selected_weekday), parse_mode='Markdown')
    await query.answer()


@telegram_chat_logging
async def __change_notification_state(query: CallbackQuery):
    """
    This query handler will be called when user change notification state
    """
    user_id = query.from_user.id
    weekday = get_weekday()
    
    await update_user_notification_state(user_id, await decode_callback_data(query))

    await query.message.edit_text(await get_poweroff_schedule_text(user_id, weekday), reply_markup=await get_schedule_menu(user_id, weekday), parse_mode='Markdown')
    await query.answer()


@telegram_chat_logging
async def __what_is_notification(query: CallbackQuery):
    """
    This query handler will be called when user click on "–©–æ —Ü–µ?" button
    """
    bot: Bot = query.bot
    user_id = query.from_user.id

    await bot.send_message(user_id, f'–í–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —â–æ–± –ë–æ—Ç –∫–æ–∂–µ–Ω –¥–µ–Ω—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è–≤ –í–∞–º –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –í–∞–º —Å–∞–º–∏–º –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –¥–µ–Ω—å')
    await query.answer()


@telegram_chat_logging
async def __developer(query: CallbackQuery):
    """
    This query handler will be called when user click on "–†–æ–∑—Ä–æ–±–Ω–∏–∫" button
    """
    bot: Bot = query.bot
    user_id = query.from_user.id

    await bot.send_message(user_id, f'–†–æ–∑—Ä–æ–±–Ω–∏–∫ —Ü—å–æ–≥–æ –±–æ—Ç–∞ –ü–∞–Ω—É—Ä—ñ–Ω –ê–Ω—Ç–æ–Ω, —Å—Ç—É–¥–µ–Ω—Ç –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É "–õ—å–≤—ñ–≤—Å—å–∫–∞ –ü–æ–ª—ñ—Ç–µ—Ö–Ω—ñ–∫–∞" üòé\n–£ —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω—å, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π, –∞–±–æ –ø—Ä–æ–±–ª–µ–º –ø–∏—Å–∞—Ç–∏ @Tommy4chan')
    await query.answer()


@telegram_chat_logging
async def __donate(query: CallbackQuery):
    """
    This query handler will be called when user click on "–î–æ–Ω–∞—Ç" button
    """
    bot: Bot = query.bot
    user_id = query.from_user.id

    await bot.send_message(user_id, f'–î–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ —Ç–∞ –æ–ø–ª–∞—Ç–∏ —Ö–æ—Å—Ç–∏–Ω–≥—É –í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–Ω–∞—Ç: https://send.monobank.ua/jar/42BHbjmmq6')
    await query.answer()


def register_users_handlers(dp: Dispatcher):

    # Message handlers
    
    dp.register_message_handler(__start, commands=["start", "restart"])
    dp.register_message_handler(__new_poweroff_schedule, content_types=['text'], text="–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—åüïî")

    # Callback handlers

    dp.register_callback_query_handler(__change_group, text="change_group")
    dp.register_callback_query_handler(__group_choosed, Text(startswith='group_'))
    dp.register_callback_query_handler(__select_another_day, Text(startswith='weekday_'))
    dp.register_callback_query_handler(__change_notification_state, Text(startswith='notification_'))
    dp.register_callback_query_handler(__what_is_notification, Text(startswith='what_is_notification'))
    dp.register_callback_query_handler(__developer, Text(startswith='developer'))
    dp.register_callback_query_handler(__donate, Text(startswith='donate'))